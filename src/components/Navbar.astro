---
// Define your navigation links here
const navLinks = [
  { 
    label: 'NPS',
    dropdown: true,
    items: [
      { href: '/nps-trimestral', label: 'NPS - Trimestral' },
      { href: '/nps-individual', label: 'NPS - Individual' },
    ]
  },
  { href: '/#casos', label: 'Casos derivar / cerrar' },
  { href: '/promotores', label: 'Promotores' },
  { href: '/balance-mensual', label: 'Balance Mensual' },
  { 
    label: 'Herramientas',
    dropdown: true,
    items: [
      { href: '/herramienta-1', label: 'Herramienta 1' },
      { href: '/herramienta-2', label: 'Herramienta 2' },
      { href: '/herramienta-3', label: 'Herramienta 3' },
    ]
  },
];

import Container from "./Container.astro"
---

<header class="mt-20">
  <nav class="fixed top-0 left-0 z-50 w-full bg-white">
    <Container class="pt-8">
      <div class="flex flex-wrap items-center justify-between py-3 mx-auto">
        <a href="/" class="flex items-center space-x-3 rtl:space-x-reverse">
          <img src="/Logo.webp" class="w-44" alt="Logo" />
        </a>
        <button data-collapse-toggle="navbar-default" type="button" class="inline-flex items-center justify-center w-10 h-10 p-2 text-sm rounded-lg text-zinc-500 md:hidden hover:bg-zinc-100 focus:outline-none focus:ring-2 focus:ring-zinc-200" aria-controls="navbar-default" aria-expanded="false">
          <span class="sr-only">Open main menu</span>
          <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h15M1 7h15M1 13h15" />
          </svg>
        </button>
        <div class="hidden w-full md:flex md:items-center md:w-auto" id="navbar-default">
          <ul class="flex flex-col p-4 mt-4 font-medium md:flex-row md:space-x-8 md:mt-0 md:p-0 font-SpaceGrotesk">
            {navLinks.map(link => (
              <li class="relative">
                {link.dropdown ? (
                  <div class="dropdown">
                    <button class="flex items-center px-3 py-2 text-black roundek md:hover:bg-transparent md:border-0 md:hover:text-lime md:p-0">
                      {link.label}
                      <svg class="w-4 h-4 ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                      </svg>
                    </button>
                    <div class="absolute left-0 z-10 hidden w-48 mt-2 bg-white border rounded-md dropdown-menu shadow-card">
                      {link.items.map(item => (
                        <a href={item.href} class="block px-4 py-2 text-sm text-black">{item.label}</a>
                      ))}
                    </div>
                  </div>
                ) : (
                  <a href={link.href} class="block px-3 py-2 text-black rounded md:hover:bg-transparent md:border-0 md:hover:text-lime md:p-0">{link.label}</a>
                )}
              </li>
            ))}
          </ul>
          <a href="/login" class="inline-flex items-center px-4 py-2 ml-4 font-medium text-white rounded-lg bg-lime hover:bg-black focus:ring-4 focus:outline-none focus:ring-zinc-300">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
            </svg>
            Iniciar sesión
          </a>
        </div>
      </div>
    </Container>
  </nav>
</header>

<script is:inline>
  function initializeNavbar() {
    const dropdownButtons = document.querySelectorAll('[id^="dropdown-button-"]');
    const dropdownMenus = document.querySelectorAll('[id^="dropdown-menu-"]');
  
    // Remover event listeners existentes
    dropdownButtons.forEach(button => {
      button.removeEventListener('click', handleDropdownClick);
    });
  
    // Agregar nuevos event listeners
    dropdownButtons.forEach((button, index) => {
      button.addEventListener('click', handleDropdownClick);
    });
  
    // Manejar clics fuera de los dropdowns
    document.removeEventListener('click', handleOutsideClick);
    document.addEventListener('click', handleOutsideClick);
  
    // Inicializar el toggle del menú móvil
    const mobileMenuToggle = document.querySelector('[data-collapse-toggle="navbar-default"]');
    const navbar = document.getElementById('navbar-default');
  
    if (mobileMenuToggle && navbar) {
      mobileMenuToggle.removeEventListener('click', toggleMobileMenu);
      mobileMenuToggle.addEventListener('click', toggleMobileMenu);
    }
  }
  
  function handleDropdownClick(e) {
    e.preventDefault();
    e.stopPropagation();
    
    const button = e.currentTarget;
    const index = button.id.split('-').pop();
    const menu = document.getElementById(`dropdown-menu-${index}`);
    
    // Cerrar todos los otros dropdowns
    document.querySelectorAll('[id^="dropdown-menu-"]').forEach((otherMenu) => {
      if (otherMenu.id !== `dropdown-menu-${index}`) {
        otherMenu.classList.add('hidden');
      }
    });
  
    // Alternar la visibilidad del dropdown actual
    menu.classList.toggle('hidden');
  }
  
  function handleOutsideClick(e) {
    if (!e.target.closest('[id^="dropdown-button-"]')) {
      document.querySelectorAll('[id^="dropdown-menu-"]').forEach(menu => {
        menu.classList.add('hidden');
      });
    }
  }
  
  function toggleMobileMenu() {
    const navbar = document.getElementById('navbar-default');
    navbar.classList.toggle('hidden');
  }
  
  // Inicializar al cargar la página
  document.addEventListener('DOMContentLoaded', initializeNavbar);
  
  // Reinicializar cuando cambie el contenido de la página (para SPAs)
  document.addEventListener('astro:after-swap', initializeNavbar);
  
  // Fallback para otros frameworks o vanilla JS
  if (window.MutationObserver) {
    const observer = new MutationObserver((mutations) => {
      if (mutations.some(mutation => mutation.addedNodes.length || mutation.removedNodes.length)) {
        initializeNavbar();
      }
    });
    observer.observe(document.body, { childList: true, subtree: true });
  }
  </script>